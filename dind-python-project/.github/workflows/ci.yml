name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Create .env file for testing
      run: |
        cat > .env << EOF
        # Environment variables for testing
        DEBUG=true
        ENV=testing
        LOG_LEVEL=INFO
        USE_GPU=false
        VERSION=0.1.0-test
        PROJECT_NAME=dind-python-project-test
        EOF
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check formatting with black
      run: |
        black --check .
    
    - name: Check imports with isort
      run: |
        isort --check .
    
    - name: Type check with mypy
      run: |
        mypy src tests
    
    - name: Test with pytest
      run: |
        pytest --cov=dind_python_project --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        # Only use token if available (optional for public repos)
        token: ${{ secrets.CODECOV_TOKEN }}
        # Ensure the CODECOV_TOKEN secret is properly configured in the repository settings.

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Create .env file for build
      run: |
        cat > .env << EOF
        # Environment variables for build
        DEBUG=false
        ENV=production
        LOG_LEVEL=INFO
        USE_GPU=false
        VERSION=0.1.0
        PROJECT_NAME=dind-python-project
        EOF
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    
    - name: Build package
      run: python -m build
    
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7
